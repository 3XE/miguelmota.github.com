{
  "name": "picturefill",
  "repo": "scottjehl/picturefill",
  "description": "A Responsive Images approach that you can use today!",
  "version": "0.0.0",
  "main": "picturefill.js",
  "scripts": [
    "picturefill.js",
    "external/matchmedia.js"
  ],
  "licence": "MIT/GPLv2",
  "gitHead": "431555909a4dce9faee6e3364fbade7dd0e92128",
  "readme": "# Picturefill\r\n\r\nA Responsive Images approach that you can use today, that mimics the [proposed picture element](http://www.w3.org/TR/2013/WD-html-picture-element-20130226/) using `div`s, for safety sake.\r\n\r\n* Author: Scott Jehl (c) 2012\r\n* License: MIT/GPLv2\r\n\r\n**Demo URL:** [http://scottjehl.github.com/picturefill/](http://scottjehl.github.com/picturefill/)\r\n\r\n**Note:** Picturefill works best in browsers that support CSS3 media queries. It includes (externally) the [matchMedia polyfill](https://github.com/paulirish/matchMedia.js/) which makes matchMedia work in `media-query`-supporting browsers that don't have `matchMedia`, or at least allows media types to be tested in most any browser. `matchMedia` and the `matchMedia` polyfill are not required for `picturefill` to work, but they are required to support the `media` attributes on `picture` `source` elements.\r\n\r\n## Size and delivery\r\n\r\nCurrently, `picturefill.js` compresses to around 498bytes (~0.5kb), after minify and gzip. To minify, you might try these online tools: [Uglify]:(http://marijnhaverbeke.nl/uglifyjs), [Yahoo Compressor]:(http://refresh-sf.com/yui/), or [Closure Compiler](http://closure-compiler.appspot.com/home). Serve with gzip compression.\r\n\r\n## Markup pattern and explanation\r\n\r\nMark up your responsive images like this. \r\n\r\n```html\r\n\t<div data-picture data-alt=\"A giant stone face at The Bayon temple in Angkor Thom, Cambodia\">\r\n\t\t<div data-src=\"small.jpg\"></div>\r\n\t\t<div data-src=\"medium.jpg\"     data-media=\"(min-width: 400px)\"></div>\r\n\t\t<div data-src=\"large.jpg\"      data-media=\"(min-width: 800px)\"></div>\r\n\t\t<div data-src=\"extralarge.jpg\" data-media=\"(min-width: 1000px)\"></div>\r\n\r\n\t\t<!-- Fallback content for non-JS browsers. Same img src as the initial, unqualified source element. -->\r\n\t\t<noscript>\r\n\t\t\t<img src=\"external/imgs/small.jpg\" alt=\"A giant stone face at The Bayon temple in Angkor Thom, Cambodia\">\r\n\t\t</noscript>\r\n\t</div>\r\n```\r\n\r\nEach `div[data-src]` element’s `data-media` attribute accepts any and all CSS3 media queries—such as `min` or `max` width, or even `min-device-pixel-ratio` for HD (retina) displays. \r\n\r\n### Explained...\r\n\r\nNotes on the markup above...\r\n\r\n* The `div[data-picture]` element's `alt` attribute is used as alternate text for the generated `img` element.\r\n* The `div[data-picture]` element can have any number of `source` elements. The above example may contain more than the average situation would call for.\r\n* Each `div[data-src]` element must have a `data-src` attribute specifying the image path. \r\n* It's generally a good idea to include one source element with no `media` qualifier, so it'll apply everywhere.\r\n* Each `data-src` element can have an optional `media` attribute to make it apply in different media settings. Both media types and queries can be used, like any `media` attribute, but support for media queries depends on the browser (unsupporting browsers fail silently).\r\n* The `matchMedia` polyfill (included in `/external`) is necessary to support the `media` attribute across browsers, even in browsers that support media queries, although it is becoming more widely supported in new browsers.\r\n* The `noscript` element wraps the fallback image for non-JavaScript environments, and including this wrapper prevents browsers from fetching the fallback image during page load (causing unnecessary overhead). Generally, it's a good idea to reference a small image here, as it's likely to be loaded in older/underpowered mobile devices.\r\n\t\r\n### HD Media Queries\r\n\r\nPicturefill natively supports HD(Retina) image replacement.  While numerous other solutions exist, picturefill has the added benefit of performance for the user in only getting served one image.\r\n\r\n* The `data-media` attribute supports [compound media queries](https://developer.mozilla.org/en-US/docs/CSS/Media_queries), allowing for very specific behaviors to emerge.  For example, a `data-media=\"(min-width: 400px) and (min-device-pixel-ratio: 2.0)` attribute can be used to serve a higher resolution version of the source instead of a standard definition image. Note you currently also need to add the `-webkit-min-device-pixel-ratio` prefix (e.g. for iOS devices).\r\n\r\n```html\r\n\t<div data-picture data-alt=\"A giant stone face at The Bayon temple in Angkor Thom, Cambodia\">\r\n\t\t<div data-src=\"small.jpg\"></div>\r\n\t\t<div data-src=\"small.jpg\"         data-media=\"(min-device-pixel-ratio: 2.0)\"></div>\r\n\t\t<div data-src=\"medium.jpg\"        data-media=\"(min-width: 400px)\"></div>\r\n\t\t<div data-src=\"medium_x2.jpg\"     data-media=\"(min-width: 400px) and (min-device-pixel-ratio: 2.0)\"></div>\r\n\t\t<div data-src=\"large.jpg\"         data-media=\"(min-width: 800px)\"></div>\r\n\t\t<div data-src=\"large_x2.jpg\"      data-media=\"(min-width: 800px) and (min-device-pixel-ratio: 2.0)\"></div>\t\r\n\t\t<div data-src=\"extralarge.jpg\"    data-media=\"(min-width: 1000px)\"></div>\r\n\t\t<div data-src=\"extralarge_x2.jpg\" data-media=\"(min-width: 1000px) and (min-device-pixel-ratio: 2.0)\"></div>\t\r\n\r\n\t\t<!-- Fallback content for non-JS browsers. Same img src as the initial, unqualified source element. -->\r\n\t\t<noscript>\r\n\t\t\t<img src=\"external/imgs/small.jpg\" alt=\"A giant stone face at The Bayon temple in Angkor Thom, Cambodia\">\r\n\t\t</noscript>\r\n\t</div>\r\n```\r\n\r\n* Note: Supporting this many breakpoints quickly adds size to the DOM and increases implementation and maintenance time, so use this technique sparingly.\r\n\r\n### Supporting IE Desktop\r\n\r\nInternet Explorer 8 and older have no support for CSS3 Media Queries, so in the examples above, IE will receive the first `data-src`\r\n image reference (or the last one it finds that has no `data-media` attribute. If you'd like to serve a larger image to IE desktop\r\nbrowsers, you might consider using conditional comments, like this:\r\n\r\n```html\r\n\t<div data-picture data-alt=\"A giant stone face at The Bayon temple in Angkor Thom, Cambodia\">\r\n\t\t<div data-src=\"small.jpg\"></div>\r\n\t\t<div data-src=\"medium.jpg\" data-media=\"(min-width: 400px)\"></div>\r\n\r\n\t\t<!--[if (lt IE 9) & (!IEMobile)]>\r\n\t\t    <div data-src=\"medium.jpg\"></div>\r\n\t\t<![endif]-->\r\n\r\n\t\t<!-- Fallback content for non-JS browsers. Same img src as the initial, unqualified source element. -->\r\n\t\t<noscript>\r\n\t\t\t<img src=\"small.jpg\" alt=\"A giant stone face at The Bayon temple in Angkor Thom, Cambodia\">\r\n\t\t</noscript>\r\n\t</div>\r\n```\r\n\r\n## Support\r\n\r\nPicturefill supports a broad range of browsers and devices (there are currently no known unsupported browsers), provided that you stick with the markup conventions provided.\r\n\r\n",
  "readmeFilename": "README.md",
  "_id": "picturefill@0.1.0",
  "commit": "431555909a4dce9faee6e3364fbade7dd0e92128",
  "repository": {
    "type": "git",
    "url": "git://github.com/scottjehl/picturefill.git"
  }
}